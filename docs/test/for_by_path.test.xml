<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xml" href="unit.test.xsl"?>

<unit-test title="do:for_by_path"
 xmlns:ns1="http://aaa/bbb/ccc"
 xmlns:ns2="http://rrr/sss/ttt">

 <assert-equal name="do:for_by_path">
  <path>aaa</path>
  <allow>|get_data_value_for_test|</allow>
  <get_data_value_for_test/>
  <expect>ABC</expect>
  <aaa>ABC</aaa>
 </assert-equal>

 <assert-not-empty name="do:for_by_path">
  <path>aaa</path>
  <allow></allow>
  (<get_data_value_for_test/>)
  <aaa>ABC</aaa>
 </assert-not-empty>

 <assert-not-empty name="do:for_by_path">
  <path>aaa</path>
  <allow></allow>
  <allow_text_node>true</allow_text_node>
  (<get_data_value_for_test/>)
  <aaa>ABC</aaa>
 </assert-not-empty>

 <assert-equal name="do:for_by_path">
  <path>aaa</path>
  <allow>xxx</allow>
  <get_data_value_for_test/>
  <expect></expect>
  <aaa>ABC</aaa>
 </assert-equal>

 <assert-equal name="do:for_by_path">
  <path>aaa</path>
  <allow>|xxx|</allow>
  <get_data_value_for_test/>
  <expect></expect>
  <aaa>ABC</aaa>
 </assert-equal>

 <assert-equal name="do:for_by_path">
  <path>aaa/bbb</path>
  <allow>|get_data_value_for_test|</allow>
  <get_data_value_for_test/>
  <expect>DEF</expect>
  <aaa>ABC<bbb>DEF</bbb>GHI</aaa>
 </assert-equal>

 <assert-equal name="do:for_by_path">
  <path>aaa</path>
  <allow>|get_data_value_for_test|</allow>
  <get_data_value_for_test/>
  <expect>ABCDEFGHI</expect>
  <aaa>ABC<bbb>DEF</bbb>GHI</aaa>
 </assert-equal>

 <assert-equal name="do:for_by_path">
  <path>aaa/@ccc</path>
  <allow>|get_data_value_for_test|</allow>
  <get_data_value_for_test/>
  <expect>CCC</expect>
  <aaa ccc="CCC">
    <bbb ddd="DDD">DEF</bbb>
  </aaa>
 </assert-equal>

 <assert-equal name="do:for_by_path">
  <path>aaa/bbb/@ddd</path>
  <allow>|get_data_value_for_test|</allow>
  <get_data_value_for_test/>
  <expect>DDD</expect>
  <aaa ccc="CCC">
    <bbb ddd="DDD">DEF</bbb>
  </aaa>
 </assert-equal>

 <assert-equal name="do:for_by_path">
  <path>*/bbb</path>
  <allow>|get_data_value_for_test|</allow>
  <get_data_value_for_test/>
  <expect>ABCDEFGHI</expect>
  <aaa>
    <bbb>ABC</bbb>
    <bbb>DEF</bbb>
  </aaa>
  <ccc>
    <bbb>GHI</bbb>
    <ddd>JKL</ddd>
  </ccc>
 </assert-equal>

 <assert-equal name="do:for_by_path">
  <path>ccc/*</path>
  <allow>|get_data_value_for_test|</allow>
  <get_data_value_for_test/>
  <expect>GHIJKL</expect>
  <aaa>
    <bbb>ABC</bbb>
    <bbb>DEF</bbb>
  </aaa>
  <ccc>
    <bbb>GHI</bbb>
    <ddd>JKL</ddd>
  </ccc>
 </assert-equal>

 <assert-equal name="do:for_by_path">
  <path>aaa/*/fff</path>
  <allow>|get_data_value_for_test|</allow>
  <get_data_value_for_test/>
  <expect>abcdef</expect>
  <aaa>
    <bbb>
     <eee>ABC</eee>
     <fff>abc</fff>
    </bbb>
    <ddd>
     <eee>DEF</eee>
     <fff>def</fff>
    </ddd>
  </aaa>
  <ccc>
    <bbb>
     <eee>JKL</eee>
     <fff>jkl</fff>
    </bbb>
    <ddd>
     <eee>GHI</eee>
     <fff>ghi</fff>
    </ddd>
  </ccc>
 </assert-equal>

 <assert-equal name="do:for_by_path">
  <path>aaa[2]/*[1]/fff[1]</path>
  <allow>|get_data_value_for_test|</allow>
  <get_data_value_for_test/>
  <expect>jkl</expect>
  <aaa>
    <bbb>
     <eee>ABC</eee>
     <fff>abc</fff>
    </bbb>
    <ddd>
     <eee>DEF</eee>
     <fff>def</fff>
    </ddd>
  </aaa>
  <aaa>
    <bbb>
     <eee>JKL</eee>
     <fff>jkl</fff>
    </bbb>
    <ddd>
     <eee>GHI</eee>
     <fff>ghi</fff>
    </ddd>
  </aaa>
 </assert-equal>

 <assert-equal name="do:for_by_path">
  <path>zzz/**/bbb/fff</path>
  <allow>|get_data_value_for_test|</allow>
  <get_data_value_for_test/>
  <expect>abcjkl</expect>
  <zzz>
   <yyy>
    <aaa>
      <bbb>
       <eee>ABC</eee>
       <fff>abc</fff>
      </bbb>
      <ddd>
       <eee>DEF</eee>
       <fff>def</fff>
      </ddd>
    </aaa>
    <ccc>
      <bbb>
       <eee>JKL</eee>
       <fff>jkl</fff>
      </bbb>
      <ddd>
       <eee>GHI</eee>
       <fff>ghi</fff>
      </ddd>
    </ccc>
   </yyy>
  </zzz>
 </assert-equal>

 <assert-equal name="do:for_by_path">
  <path>zzz//bbb/fff</path>
  <allow>|get_data_value_for_test|</allow>
  <get_data_value_for_test/>
  <expect>abcjkl</expect>
  <zzz>
   <yyy>
    <aaa>
      <bbb>
       <eee>ABC</eee>
       <fff>abc</fff>
      </bbb>
      <ddd>
       <eee>DEF</eee>
       <fff>def</fff>
      </ddd>
    </aaa>
    <ccc>
      <bbb>
       <eee>JKL</eee>
       <fff>jkl</fff>
      </bbb>
      <ddd>
       <eee>GHI</eee>
       <fff>ghi</fff>
      </ddd>
    </ccc>
   </yyy>
  </zzz>
 </assert-equal>

 <assert-equal name="do:for_by_path">
  <path>/**/bbb[@key='B1']/fff</path>
  <allow>|get_data_value_for_test|</allow>
  <get_data_value_for_test/>
  <expect>abcjkl</expect>
  <zzz>
   <yyy>
    <aaa>
      <bbb key="B1">
       <eee>ABC</eee>
       <fff>abc</fff>
      </bbb>
      <ddd>
       <eee>DEF</eee>
       <fff>def</fff>
      </ddd>
    </aaa>
    <ccc>
      <bbb key="B1">
       <eee>JKL</eee>
       <fff>jkl</fff>
      </bbb>
      <ddd>
       <eee>GHI</eee>
       <fff>ghi</fff>
      </ddd>
    </ccc>
   </yyy>
  </zzz>
 </assert-equal>

 <assert-equal name="do:for_by_path">
  <path>//bbb[@key='B2']/fff</path>
  <allow>|get_data_value_for_test|</allow>
  <get_data_value_for_test/>
  <expect>abcjkl</expect>
  <zzz>
   <yyy>
    <aaa>
      <bbb key="B2">
       <eee>ABC</eee>
       <fff>abc</fff>
      </bbb>
      <ddd>
       <eee>DEF</eee>
       <fff>def</fff>
      </ddd>
    </aaa>
    <ccc>
      <bbb key="B2">
       <eee>JKL</eee>
       <fff>jkl</fff>
      </bbb>
      <ddd>
       <eee>GHI</eee>
       <fff>ghi</fff>
      </ddd>
    </ccc>
   </yyy>
  </zzz>
 </assert-equal>

 <assert-equal name="do:for_by_path">
  <path>ns1:aaa[@c0=1]</path>
  <allow>|get_data_value_for_test|</allow>
  <get_data_value_for_test/>
  <expect>ABC1</expect>
  <ns1:aaa c0="0">ABC0</ns1:aaa>
  <ns1:aaa c0="1">ABC1</ns1:aaa>
  <ns1:aaa c0="2">ABC2</ns1:aaa>
 </assert-equal>

 <assert-equal name="do:for_by_path">
  <path>ns1:aaa[@c0=1 | @c0=2]</path>
  <allow>|get_data_value_for_test|</allow>
  <get_data_value_for_test/>
  <expect>ABC1ABC2</expect>
  <ns1:aaa c0="0">ABC0</ns1:aaa>
  <ns1:aaa c0="1">ABC1</ns1:aaa>
  <ns1:aaa c0="2">ABC2</ns1:aaa>
 </assert-equal>

 <assert-equal name="do:for_by_path">
  <path>ns1:aaa[@c0=1 , @c1='B']</path>
  <allow>|get_data_value_for_test|</allow>
  <get_data_value_for_test/>
  <expect>ABC1</expect>
  <ns1:aaa c0="1" c1="A">ABC0</ns1:aaa>
  <ns1:aaa c0="1" c1="B">ABC1</ns1:aaa>
  <ns1:aaa c0="2" c1="B">ABC2</ns1:aaa>
 </assert-equal>

 <assert-equal name="do:for_by_path">
  <path>ns1:aaa[@c0=1,@c1='B'|@c0=2,@c1='C']</path>
  <allow>|get_data_value_for_test|</allow>
  <get_data_value_for_test/>
  <expect>ABC1ABC3</expect>
  <ns1:aaa c0="1" c1="A">ABC0</ns1:aaa>
  <ns1:aaa c0="1" c1="B">ABC1</ns1:aaa>
  <ns1:aaa c0="2" c1="B">ABC2</ns1:aaa>
  <ns1:aaa c0="2" c1="C">ABC3</ns1:aaa>
 </assert-equal>

 <assert-equal name="do:for_by_path">
  <path>aaa/bbb/eee/../eee</path>
  <allow>|get_data_value_for_test|</allow>
  <get_data_value_for_test/>
  <expect>ABCDEFJKLGHI</expect>
  <aaa>
    <bbb>
     <eee>ABC</eee>
     <fff>abc</fff>
    </bbb>
    <bbb>
     <eee>DEF</eee>
     <fff>def</fff>
    </bbb>
  </aaa>
  <aaa>
    <bbb>
     <eee>JKL</eee>
     <fff>jkl</fff>
    </bbb>
    <bbb>
     <eee>GHI</eee>
     <fff>ghi</fff>
    </bbb>
  </aaa>
 </assert-equal>

 <assert-equal name="do:for_by_path">
  <path>aaa/bbb/eee/../eee[../fff='def']</path>
  <allow>|get_data_value_for_test|</allow>
  <get_data_value_for_test/>
  <expect>DEF</expect>
  <aaa>
    <bbb>
     <eee>ABC</eee>
     <fff>abc</fff>
    </bbb>
    <bbb>
     <eee>DEF</eee>
     <fff>def</fff>
    </bbb>
  </aaa>
  <aaa>
    <bbb>
     <eee>JKL</eee>
     <fff>jkl</fff>
    </bbb>
    <bbb>
     <eee>GHI</eee>
     <fff>ghi</fff>
    </bbb>
  </aaa>
 </assert-equal>

 <assert-equal name="do:for_by_path">
  <path>/*/ABC/DEF[2]</path>
  <allow>|get_data_value_for_test|</allow>
  <get_data_value_for_test/>
  <expect>JKL</expect>
 </assert-equal>

 <assert-equal name="do:for_by_path">
  <path>/*/ABC/DEF[2]</path>
  <deny>|expect|</deny>
  <get_data_value_for_test/>
  <expect>/*/ABC/DEF[2]|expect|JKL</expect>
 </assert-equal>

 <assert-equal name="do:for_by_path">
  <path>/*/ABC/DEF[2]</path>
  <deny>|path|expect|deny|</deny>
  <get_data_value_for_test/>
  <expect>JKL</expect>
 </assert-equal>


 <assert-equal name="do:for_by_path">
  <path>aaa</path>
  <reverse>true</reverse>
  <allow>|get_data_value_for_test|</allow>
  <get_data_value_for_test/>
  <expect>ABC</expect>
  <aaa>ABC</aaa>
 </assert-equal>

 <assert-equal name="do:for_by_path">
  <path>*/bbb</path>
  <reverse>true</reverse>
  <allow>|get_data_value_for_test|</allow>
  <get_data_value_for_test/>
  <expect>GHIDEFABC</expect>
  <aaa>
    <bbb>ABC</bbb>
    <bbb>DEF</bbb>
  </aaa>
  <ccc>
    <bbb>GHI</bbb>
    <ddd>JKL</ddd>
  </ccc>
 </assert-equal>

 <assert-equal name="do:for_by_path">
  <path>ns1:aaa[@c0=1 | @c0=2]</path>
  <reverse>true</reverse>
  <allow>|get_data_value_for_test|</allow>
  <get_data_value_for_test/>
  <expect>ABC2ABC1</expect>
  <ns1:aaa c0="0">ABC0</ns1:aaa>
  <ns1:aaa c0="1">ABC1</ns1:aaa>
  <ns1:aaa c0="2">ABC2</ns1:aaa>
 </assert-equal>



 <ABC>
  <DEF>GHI</DEF>
  <DEF>JKL</DEF>
  <DEF>MNO</DEF>
 </ABC>

</unit-test>
